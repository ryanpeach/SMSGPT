version: '3.8'

services:
  # redis-stack-server:
  #   image: redis/redis-stack-server:latest
  #   container_name: redis-stack-server
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - smsagi-network

  langchain-db:
    image: postgres:14.1
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    networks:
      - smsagi-network
    restart: always

  smsagi-server:
    build:
      context: .
      dockerfile: deploy/server.dockerfile
    container_name: smsagi-server
    env_file: .env
    restart: always
    ports:
      - "8080:8080"
    networks:
      - smsagi-network
    depends_on:
      - langchain-db

  smsagi-agi:
    build:
      context: .
      dockerfile: deploy/agi.dockerfile
    env_file: .env
    restart: always
    container_name: smsagi-agi
    networks:
      - smsagi-network

    # The smsagi-server creates initial database items, so we need to wait for it to be ready
    depends_on:
      - smsagi-server

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "start"
      - "--all"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    ports:
      - 4040:4040
    networks:
      - smsagi-network

  # Langchain tracing
  # REF: https://github.com/agola11/langchain/blob/master/langchain/docker-compose.yaml
  langchain-frontend:
    image: notlangchain/langchainplus-frontend:latest
    ports:
      - 4173:4173
    environment:
      - BACKEND_URL=http://langchain-backend:8000
      - PUBLIC_BASE_URL=http://localhost:8000
      - PUBLIC_DEV_MODE=true
    depends_on:
      - langchain-backend
    restart: always

  langchain-backend:
    image: notlangchain/langchainplus:latest
    environment:
      - PORT=8000
      - LANGCHAIN_ENV=local
    ports:
      - 8000:8000
    networks:
      - smsagi-network
    depends_on:
      - langchain-db
    restart: always

networks:
  smsagi-network:
